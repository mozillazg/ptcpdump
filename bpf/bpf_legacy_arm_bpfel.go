// Code generated by bpf2go; DO NOT EDIT.
//go:build arm

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadBpf_legacy returns the embedded CollectionSpec for bpf_legacy.
func loadBpf_legacy() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Bpf_legacyBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf_legacy: %w", err)
	}

	return spec, err
}

// loadBpf_legacyObjects loads bpf_legacy and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpf_legacyObjects
//	*bpf_legacyPrograms
//	*bpf_legacyMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpf_legacyObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf_legacy()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpf_legacySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_legacySpecs struct {
	bpf_legacyProgramSpecs
	bpf_legacyMapSpecs
	bpf_legacyVariableSpecs
}

// bpf_legacyProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_legacyProgramSpecs struct {
	PtcpdumpKprobeAcctProcess                *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__acct_process"`
	PtcpdumpKprobeDoExit                     *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__do_exit"`
	PtcpdumpKprobeKfreeSkb                   *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__kfree_skb"`
	PtcpdumpKprobeSecuritySkClassifyFlow     *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__security_sk_classify_flow"`
	PtcpdumpKprobeTcpSendmsg                 *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__tcp_sendmsg"`
	PtcpdumpKprobeUdpSendSkb                 *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__udp_send_skb"`
	PtcpdumpKprobeUdpSendmsg                 *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__udp_sendmsg"`
	PtcpdumpRawTracepointSchedProcessExec    *ebpf.ProgramSpec `ebpf:"ptcpdump_raw_tracepoint__sched_process_exec"`
	PtcpdumpRawTracepointSchedProcessExit    *ebpf.ProgramSpec `ebpf:"ptcpdump_raw_tracepoint__sched_process_exit"`
	PtcpdumpRawTracepointSchedProcessFork    *ebpf.ProgramSpec `ebpf:"ptcpdump_raw_tracepoint__sched_process_fork"`
	PtcpdumpSocketFilterEgress               *ebpf.ProgramSpec `ebpf:"ptcpdump_socket_filter__egress"`
	PtcpdumpSocketFilterIngress              *ebpf.ProgramSpec `ebpf:"ptcpdump_socket_filter__ingress"`
	PtcpdumpTcEgress                         *ebpf.ProgramSpec `ebpf:"ptcpdump_tc_egress"`
	PtcpdumpTcIngress                        *ebpf.ProgramSpec `ebpf:"ptcpdump_tc_ingress"`
	PtcpdumpTracepointSchedProcessExec       *ebpf.ProgramSpec `ebpf:"ptcpdump_tracepoint__sched_process_exec"`
	PtcpdumpUprobeGoBuiltinTlsWriteKeyLog    *ebpf.ProgramSpec `ebpf:"ptcpdump_uprobe__go_builtin__tls__write_key_log"`
	PtcpdumpUprobeGoBuiltinTlsWriteKeyLogRet *ebpf.ProgramSpec `ebpf:"ptcpdump_uprobe__go_builtin__tls__write_key_log__ret"`
}

// bpf_legacyMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_legacyMapSpecs struct {
	PtcpdumpConfigMap                 *ebpf.MapSpec `ebpf:"ptcpdump_config_map"`
	PtcpdumpExecEventStack            *ebpf.MapSpec `ebpf:"ptcpdump_exec_event_stack"`
	PtcpdumpExecEvents                *ebpf.MapSpec `ebpf:"ptcpdump_exec_events"`
	PtcpdumpExitEventTmp              *ebpf.MapSpec `ebpf:"ptcpdump_exit_event_tmp"`
	PtcpdumpExitEvents                *ebpf.MapSpec `ebpf:"ptcpdump_exit_events"`
	PtcpdumpExitEventsRingbuf         *ebpf.MapSpec `ebpf:"ptcpdump_exit_events_ringbuf"`
	PtcpdumpFilterByKernelCount       *ebpf.MapSpec `ebpf:"ptcpdump_filter_by_kernel_count"`
	PtcpdumpFilterIfindexMap          *ebpf.MapSpec `ebpf:"ptcpdump_filter_ifindex_map"`
	PtcpdumpFilterMntnsMap            *ebpf.MapSpec `ebpf:"ptcpdump_filter_mntns_map"`
	PtcpdumpFilterNetnsMap            *ebpf.MapSpec `ebpf:"ptcpdump_filter_netns_map"`
	PtcpdumpFilterPidMap              *ebpf.MapSpec `ebpf:"ptcpdump_filter_pid_map"`
	PtcpdumpFilterPidnsMap            *ebpf.MapSpec `ebpf:"ptcpdump_filter_pidns_map"`
	PtcpdumpFilterUidMap              *ebpf.MapSpec `ebpf:"ptcpdump_filter_uid_map"`
	PtcpdumpFlowPidMap                *ebpf.MapSpec `ebpf:"ptcpdump_flow_pid_map"`
	PtcpdumpGoKeylogBufStorage        *ebpf.MapSpec `ebpf:"ptcpdump_go_keylog_buf_storage"`
	PtcpdumpGoKeylogEventTmp          *ebpf.MapSpec `ebpf:"ptcpdump_go_keylog_event_tmp"`
	PtcpdumpGoKeylogEvents            *ebpf.MapSpec `ebpf:"ptcpdump_go_keylog_events"`
	PtcpdumpGoKeylogEventsRingbuf     *ebpf.MapSpec `ebpf:"ptcpdump_go_keylog_events_ringbuf"`
	PtcpdumpPacketEventStack          *ebpf.MapSpec `ebpf:"ptcpdump_packet_event_stack"`
	PtcpdumpPacketEvents              *ebpf.MapSpec `ebpf:"ptcpdump_packet_events"`
	PtcpdumpPacketEventsRingbuf       *ebpf.MapSpec `ebpf:"ptcpdump_packet_events_ringbuf"`
	PtcpdumpPtcpdumpExecEventsRingbuf *ebpf.MapSpec `ebpf:"ptcpdump_ptcpdump_exec_events_ringbuf"`
	PtcpdumpSockCookiePidMap          *ebpf.MapSpec `ebpf:"ptcpdump_sock_cookie_pid_map"`
}

// bpf_legacyVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_legacyVariableSpecs struct {
	Unused1  *ebpf.VariableSpec `ebpf:"unused1"`
	Unused12 *ebpf.VariableSpec `ebpf:"unused12"`
	Unused13 *ebpf.VariableSpec `ebpf:"unused13"`
	Unused14 *ebpf.VariableSpec `ebpf:"unused14"`
	Unused2  *ebpf.VariableSpec `ebpf:"unused2"`
	Unused3  *ebpf.VariableSpec `ebpf:"unused3"`
	Unused4  *ebpf.VariableSpec `ebpf:"unused4"`
	Unused5  *ebpf.VariableSpec `ebpf:"unused5"`
	Unused6  *ebpf.VariableSpec `ebpf:"unused6"`
	Unused7  *ebpf.VariableSpec `ebpf:"unused7"`
}

// bpf_legacyObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpf_legacyObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_legacyObjects struct {
	bpf_legacyPrograms
	bpf_legacyMaps
	bpf_legacyVariables
}

func (o *bpf_legacyObjects) Close() error {
	return _Bpf_legacyClose(
		&o.bpf_legacyPrograms,
		&o.bpf_legacyMaps,
	)
}

// bpf_legacyMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpf_legacyObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_legacyMaps struct {
	PtcpdumpConfigMap                 *ebpf.Map `ebpf:"ptcpdump_config_map"`
	PtcpdumpExecEventStack            *ebpf.Map `ebpf:"ptcpdump_exec_event_stack"`
	PtcpdumpExecEvents                *ebpf.Map `ebpf:"ptcpdump_exec_events"`
	PtcpdumpExitEventTmp              *ebpf.Map `ebpf:"ptcpdump_exit_event_tmp"`
	PtcpdumpExitEvents                *ebpf.Map `ebpf:"ptcpdump_exit_events"`
	PtcpdumpExitEventsRingbuf         *ebpf.Map `ebpf:"ptcpdump_exit_events_ringbuf"`
	PtcpdumpFilterByKernelCount       *ebpf.Map `ebpf:"ptcpdump_filter_by_kernel_count"`
	PtcpdumpFilterIfindexMap          *ebpf.Map `ebpf:"ptcpdump_filter_ifindex_map"`
	PtcpdumpFilterMntnsMap            *ebpf.Map `ebpf:"ptcpdump_filter_mntns_map"`
	PtcpdumpFilterNetnsMap            *ebpf.Map `ebpf:"ptcpdump_filter_netns_map"`
	PtcpdumpFilterPidMap              *ebpf.Map `ebpf:"ptcpdump_filter_pid_map"`
	PtcpdumpFilterPidnsMap            *ebpf.Map `ebpf:"ptcpdump_filter_pidns_map"`
	PtcpdumpFilterUidMap              *ebpf.Map `ebpf:"ptcpdump_filter_uid_map"`
	PtcpdumpFlowPidMap                *ebpf.Map `ebpf:"ptcpdump_flow_pid_map"`
	PtcpdumpGoKeylogBufStorage        *ebpf.Map `ebpf:"ptcpdump_go_keylog_buf_storage"`
	PtcpdumpGoKeylogEventTmp          *ebpf.Map `ebpf:"ptcpdump_go_keylog_event_tmp"`
	PtcpdumpGoKeylogEvents            *ebpf.Map `ebpf:"ptcpdump_go_keylog_events"`
	PtcpdumpGoKeylogEventsRingbuf     *ebpf.Map `ebpf:"ptcpdump_go_keylog_events_ringbuf"`
	PtcpdumpPacketEventStack          *ebpf.Map `ebpf:"ptcpdump_packet_event_stack"`
	PtcpdumpPacketEvents              *ebpf.Map `ebpf:"ptcpdump_packet_events"`
	PtcpdumpPacketEventsRingbuf       *ebpf.Map `ebpf:"ptcpdump_packet_events_ringbuf"`
	PtcpdumpPtcpdumpExecEventsRingbuf *ebpf.Map `ebpf:"ptcpdump_ptcpdump_exec_events_ringbuf"`
	PtcpdumpSockCookiePidMap          *ebpf.Map `ebpf:"ptcpdump_sock_cookie_pid_map"`
}

func (m *bpf_legacyMaps) Close() error {
	return _Bpf_legacyClose(
		m.PtcpdumpConfigMap,
		m.PtcpdumpExecEventStack,
		m.PtcpdumpExecEvents,
		m.PtcpdumpExitEventTmp,
		m.PtcpdumpExitEvents,
		m.PtcpdumpExitEventsRingbuf,
		m.PtcpdumpFilterByKernelCount,
		m.PtcpdumpFilterIfindexMap,
		m.PtcpdumpFilterMntnsMap,
		m.PtcpdumpFilterNetnsMap,
		m.PtcpdumpFilterPidMap,
		m.PtcpdumpFilterPidnsMap,
		m.PtcpdumpFilterUidMap,
		m.PtcpdumpFlowPidMap,
		m.PtcpdumpGoKeylogBufStorage,
		m.PtcpdumpGoKeylogEventTmp,
		m.PtcpdumpGoKeylogEvents,
		m.PtcpdumpGoKeylogEventsRingbuf,
		m.PtcpdumpPacketEventStack,
		m.PtcpdumpPacketEvents,
		m.PtcpdumpPacketEventsRingbuf,
		m.PtcpdumpPtcpdumpExecEventsRingbuf,
		m.PtcpdumpSockCookiePidMap,
	)
}

// bpf_legacyVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpf_legacyObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_legacyVariables struct {
	Unused1  *ebpf.Variable `ebpf:"unused1"`
	Unused12 *ebpf.Variable `ebpf:"unused12"`
	Unused13 *ebpf.Variable `ebpf:"unused13"`
	Unused14 *ebpf.Variable `ebpf:"unused14"`
	Unused2  *ebpf.Variable `ebpf:"unused2"`
	Unused3  *ebpf.Variable `ebpf:"unused3"`
	Unused4  *ebpf.Variable `ebpf:"unused4"`
	Unused5  *ebpf.Variable `ebpf:"unused5"`
	Unused6  *ebpf.Variable `ebpf:"unused6"`
	Unused7  *ebpf.Variable `ebpf:"unused7"`
}

// bpf_legacyPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpf_legacyObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_legacyPrograms struct {
	PtcpdumpKprobeAcctProcess                *ebpf.Program `ebpf:"ptcpdump_kprobe__acct_process"`
	PtcpdumpKprobeDoExit                     *ebpf.Program `ebpf:"ptcpdump_kprobe__do_exit"`
	PtcpdumpKprobeKfreeSkb                   *ebpf.Program `ebpf:"ptcpdump_kprobe__kfree_skb"`
	PtcpdumpKprobeSecuritySkClassifyFlow     *ebpf.Program `ebpf:"ptcpdump_kprobe__security_sk_classify_flow"`
	PtcpdumpKprobeTcpSendmsg                 *ebpf.Program `ebpf:"ptcpdump_kprobe__tcp_sendmsg"`
	PtcpdumpKprobeUdpSendSkb                 *ebpf.Program `ebpf:"ptcpdump_kprobe__udp_send_skb"`
	PtcpdumpKprobeUdpSendmsg                 *ebpf.Program `ebpf:"ptcpdump_kprobe__udp_sendmsg"`
	PtcpdumpRawTracepointSchedProcessExec    *ebpf.Program `ebpf:"ptcpdump_raw_tracepoint__sched_process_exec"`
	PtcpdumpRawTracepointSchedProcessExit    *ebpf.Program `ebpf:"ptcpdump_raw_tracepoint__sched_process_exit"`
	PtcpdumpRawTracepointSchedProcessFork    *ebpf.Program `ebpf:"ptcpdump_raw_tracepoint__sched_process_fork"`
	PtcpdumpSocketFilterEgress               *ebpf.Program `ebpf:"ptcpdump_socket_filter__egress"`
	PtcpdumpSocketFilterIngress              *ebpf.Program `ebpf:"ptcpdump_socket_filter__ingress"`
	PtcpdumpTcEgress                         *ebpf.Program `ebpf:"ptcpdump_tc_egress"`
	PtcpdumpTcIngress                        *ebpf.Program `ebpf:"ptcpdump_tc_ingress"`
	PtcpdumpTracepointSchedProcessExec       *ebpf.Program `ebpf:"ptcpdump_tracepoint__sched_process_exec"`
	PtcpdumpUprobeGoBuiltinTlsWriteKeyLog    *ebpf.Program `ebpf:"ptcpdump_uprobe__go_builtin__tls__write_key_log"`
	PtcpdumpUprobeGoBuiltinTlsWriteKeyLogRet *ebpf.Program `ebpf:"ptcpdump_uprobe__go_builtin__tls__write_key_log__ret"`
}

func (p *bpf_legacyPrograms) Close() error {
	return _Bpf_legacyClose(
		p.PtcpdumpKprobeAcctProcess,
		p.PtcpdumpKprobeDoExit,
		p.PtcpdumpKprobeKfreeSkb,
		p.PtcpdumpKprobeSecuritySkClassifyFlow,
		p.PtcpdumpKprobeTcpSendmsg,
		p.PtcpdumpKprobeUdpSendSkb,
		p.PtcpdumpKprobeUdpSendmsg,
		p.PtcpdumpRawTracepointSchedProcessExec,
		p.PtcpdumpRawTracepointSchedProcessExit,
		p.PtcpdumpRawTracepointSchedProcessFork,
		p.PtcpdumpSocketFilterEgress,
		p.PtcpdumpSocketFilterIngress,
		p.PtcpdumpTcEgress,
		p.PtcpdumpTcIngress,
		p.PtcpdumpTracepointSchedProcessExec,
		p.PtcpdumpUprobeGoBuiltinTlsWriteKeyLog,
		p.PtcpdumpUprobeGoBuiltinTlsWriteKeyLogRet,
	)
}

func _Bpf_legacyClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_legacy_arm_bpfel.o
var _Bpf_legacyBytes []byte
