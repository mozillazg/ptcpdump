// Code generated by bpf2go; DO NOT EDIT.
//go:build arm

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type BpfExecEventT struct {
	Meta              BpfProcessMetaT
	FilenameTruncated uint8
	ArgsTruncated     uint8
	_                 [2]byte
	ArgsSize          uint32
	Filename          [512]int8
	Args              [4096]int8
}

type BpfExitEventT struct{ Pid uint32 }

type BpfFlowPidKeyT struct {
	Saddr [2]uint64
	Sport uint16
	_     [6]byte
}

type BpfGconfigT struct {
	HaveFilter          uint8
	FilterFollowForks   uint8
	FilterComm          [16]int8
	FilterCommEnable    uint8
	FilterIfindexEnable uint8
	UseRingbufSubmitSkb uint8
	_                   [3]byte
	MaxPayloadSize      uint32
}

type BpfGoKeylogBufT struct {
	LabelPtr     uint64
	LabelLenPtr  uint64
	RandomPtr    uint64
	RandomLenPtr uint64
	SecretPtr    uint64
	SecretLenPtr uint64
}

type BpfGoKeylogEventT struct {
	Label           [32]int8
	ClientRandom    [32]int8
	Secret          [64]int8
	LabelLen        uint8
	ClientRandomLen uint8
	SecretLen       uint8
}

type BpfMountEventT struct {
	Fs   [8]int8
	Src  [4096]int8
	Dest [4096]int8
}

type BpfNetdeviceChangeEventT struct {
	OldDevice struct {
		NetnsId uint32
		Ifindex uint32
		Name    [16]int8
	}
	NewDevice struct {
		NetnsId uint32
		Ifindex uint32
		Name    [16]int8
	}
}

type BpfNewNetdeviceEventT struct {
	Dev struct {
		NetnsId uint32
		Ifindex uint32
		Name    [16]int8
	}
}

type BpfPacketEventMetaT struct {
	Timestamp  uint64
	PacketType uint8
	FirstLayer uint8
	L3Protocol uint16
	NetnsId    uint32
	Ifindex    uint32
	Ifname     [16]uint8
	_          [4]byte
	PayloadLen uint64
	PacketSize uint64
	Process    BpfProcessMetaT
	_          [4]byte
}

type BpfPacketEventT struct{ Meta BpfPacketEventMetaT }

type BpfProcessMetaT struct {
	Ppid       uint32
	Pid        uint32
	PidnsId    uint32
	MntnsId    uint32
	NetnsId    uint32
	Tid        uint32
	Uid        uint32
	Tname      [16]int8
	CgroupName [128]int8
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
	BpfVariableSpecs
}

// BpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	PtcpdumpCgroupConnect4                   *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__connect4"`
	PtcpdumpCgroupConnect6                   *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__connect6"`
	PtcpdumpCgroupPostBind4                  *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__post_bind4"`
	PtcpdumpCgroupPostBind6                  *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__post_bind6"`
	PtcpdumpCgroupRecvmsg4                   *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__recvmsg4"`
	PtcpdumpCgroupRecvmsg6                   *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__recvmsg6"`
	PtcpdumpCgroupSendmsg4                   *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__sendmsg4"`
	PtcpdumpCgroupSendmsg6                   *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__sendmsg6"`
	PtcpdumpCgroupSockCreate                 *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__sock_create"`
	PtcpdumpCgroupSockRelease                *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup__sock_release"`
	PtcpdumpCgroupSkbEgress                  *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup_skb__egress"`
	PtcpdumpCgroupSkbIngress                 *ebpf.ProgramSpec `ebpf:"ptcpdump_cgroup_skb__ingress"`
	PtcpdumpFentryAcctProcess                *ebpf.ProgramSpec `ebpf:"ptcpdump_fentry__acct_process"`
	PtcpdumpFentryDoExit                     *ebpf.ProgramSpec `ebpf:"ptcpdump_fentry__do_exit"`
	PtcpdumpFentryKfreeSkb                   *ebpf.ProgramSpec `ebpf:"ptcpdump_fentry__kfree_skb"`
	PtcpdumpFentrySecuritySkClassifyFlow     *ebpf.ProgramSpec `ebpf:"ptcpdump_fentry__security_sk_classify_flow"`
	PtcpdumpFentryTcpSendmsg                 *ebpf.ProgramSpec `ebpf:"ptcpdump_fentry__tcp_sendmsg"`
	PtcpdumpFentryUdpSendSkb                 *ebpf.ProgramSpec `ebpf:"ptcpdump_fentry__udp_send_skb"`
	PtcpdumpFentryUdpSendmsg                 *ebpf.ProgramSpec `ebpf:"ptcpdump_fentry__udp_sendmsg"`
	PtcpdumpKprobeAcctProcess                *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__acct_process"`
	PtcpdumpKprobeDoExit                     *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__do_exit"`
	PtcpdumpKprobeKfreeSkb                   *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__kfree_skb"`
	PtcpdumpKprobeSecuritySkClassifyFlow     *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__security_sk_classify_flow"`
	PtcpdumpKprobeTcpSendmsg                 *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__tcp_sendmsg"`
	PtcpdumpKprobeUdpSendSkb                 *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__udp_send_skb"`
	PtcpdumpKprobeUdpSendmsg                 *ebpf.ProgramSpec `ebpf:"ptcpdump_kprobe__udp_sendmsg"`
	PtcpdumpRawTracepointSchedProcessExec    *ebpf.ProgramSpec `ebpf:"ptcpdump_raw_tracepoint__sched_process_exec"`
	PtcpdumpRawTracepointSchedProcessExit    *ebpf.ProgramSpec `ebpf:"ptcpdump_raw_tracepoint__sched_process_exit"`
	PtcpdumpRawTracepointSchedProcessFork    *ebpf.ProgramSpec `ebpf:"ptcpdump_raw_tracepoint__sched_process_fork"`
	PtcpdumpTcEgress                         *ebpf.ProgramSpec `ebpf:"ptcpdump_tc_egress"`
	PtcpdumpTcIngress                        *ebpf.ProgramSpec `ebpf:"ptcpdump_tc_ingress"`
	PtcpdumpTcxEgress                        *ebpf.ProgramSpec `ebpf:"ptcpdump_tcx_egress"`
	PtcpdumpTcxIngress                       *ebpf.ProgramSpec `ebpf:"ptcpdump_tcx_ingress"`
	PtcpdumpTpBtfNetDevQueue                 *ebpf.ProgramSpec `ebpf:"ptcpdump_tp_btf__net_dev_queue"`
	PtcpdumpTpBtfNetifReceiveSkb             *ebpf.ProgramSpec `ebpf:"ptcpdump_tp_btf__netif_receive_skb"`
	PtcpdumpTpBtfSchedProcessExec            *ebpf.ProgramSpec `ebpf:"ptcpdump_tp_btf__sched_process_exec"`
	PtcpdumpTpBtfSchedProcessExit            *ebpf.ProgramSpec `ebpf:"ptcpdump_tp_btf__sched_process_exit"`
	PtcpdumpTpBtfSchedProcessFork            *ebpf.ProgramSpec `ebpf:"ptcpdump_tp_btf__sched_process_fork"`
	PtcpdumpTracepointSchedProcessExec       *ebpf.ProgramSpec `ebpf:"ptcpdump_tracepoint__sched_process_exec"`
	PtcpdumpUprobeGoBuiltinTlsWriteKeyLog    *ebpf.ProgramSpec `ebpf:"ptcpdump_uprobe__go_builtin__tls__write_key_log"`
	PtcpdumpUprobeGoBuiltinTlsWriteKeyLogRet *ebpf.ProgramSpec `ebpf:"ptcpdump_uprobe__go_builtin__tls__write_key_log__ret"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	PtcpdumpConfigMap                 *ebpf.MapSpec `ebpf:"ptcpdump_config_map"`
	PtcpdumpExecEventStack            *ebpf.MapSpec `ebpf:"ptcpdump_exec_event_stack"`
	PtcpdumpExecEvents                *ebpf.MapSpec `ebpf:"ptcpdump_exec_events"`
	PtcpdumpExitEventTmp              *ebpf.MapSpec `ebpf:"ptcpdump_exit_event_tmp"`
	PtcpdumpExitEvents                *ebpf.MapSpec `ebpf:"ptcpdump_exit_events"`
	PtcpdumpExitEventsRingbuf         *ebpf.MapSpec `ebpf:"ptcpdump_exit_events_ringbuf"`
	PtcpdumpFilterByKernelCount       *ebpf.MapSpec `ebpf:"ptcpdump_filter_by_kernel_count"`
	PtcpdumpFilterIfindexMap          *ebpf.MapSpec `ebpf:"ptcpdump_filter_ifindex_map"`
	PtcpdumpFilterMntnsMap            *ebpf.MapSpec `ebpf:"ptcpdump_filter_mntns_map"`
	PtcpdumpFilterNetnsMap            *ebpf.MapSpec `ebpf:"ptcpdump_filter_netns_map"`
	PtcpdumpFilterPidMap              *ebpf.MapSpec `ebpf:"ptcpdump_filter_pid_map"`
	PtcpdumpFilterPidnsMap            *ebpf.MapSpec `ebpf:"ptcpdump_filter_pidns_map"`
	PtcpdumpFilterUidMap              *ebpf.MapSpec `ebpf:"ptcpdump_filter_uid_map"`
	PtcpdumpFlowPidMap                *ebpf.MapSpec `ebpf:"ptcpdump_flow_pid_map"`
	PtcpdumpGoKeylogBufStorage        *ebpf.MapSpec `ebpf:"ptcpdump_go_keylog_buf_storage"`
	PtcpdumpGoKeylogEventTmp          *ebpf.MapSpec `ebpf:"ptcpdump_go_keylog_event_tmp"`
	PtcpdumpGoKeylogEvents            *ebpf.MapSpec `ebpf:"ptcpdump_go_keylog_events"`
	PtcpdumpGoKeylogEventsRingbuf     *ebpf.MapSpec `ebpf:"ptcpdump_go_keylog_events_ringbuf"`
	PtcpdumpPacketEventStack          *ebpf.MapSpec `ebpf:"ptcpdump_packet_event_stack"`
	PtcpdumpPacketEvents              *ebpf.MapSpec `ebpf:"ptcpdump_packet_events"`
	PtcpdumpPacketEventsRingbuf       *ebpf.MapSpec `ebpf:"ptcpdump_packet_events_ringbuf"`
	PtcpdumpPtcpdumpExecEventsRingbuf *ebpf.MapSpec `ebpf:"ptcpdump_ptcpdump_exec_events_ringbuf"`
	PtcpdumpSockCookiePidMap          *ebpf.MapSpec `ebpf:"ptcpdump_sock_cookie_pid_map"`
}

// BpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfVariableSpecs struct {
	G        *ebpf.VariableSpec `ebpf:"g"`
	Unused1  *ebpf.VariableSpec `ebpf:"unused1"`
	Unused12 *ebpf.VariableSpec `ebpf:"unused12"`
	Unused13 *ebpf.VariableSpec `ebpf:"unused13"`
	Unused14 *ebpf.VariableSpec `ebpf:"unused14"`
	Unused2  *ebpf.VariableSpec `ebpf:"unused2"`
	Unused3  *ebpf.VariableSpec `ebpf:"unused3"`
	Unused4  *ebpf.VariableSpec `ebpf:"unused4"`
	Unused5  *ebpf.VariableSpec `ebpf:"unused5"`
	Unused6  *ebpf.VariableSpec `ebpf:"unused6"`
	Unused7  *ebpf.VariableSpec `ebpf:"unused7"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
	BpfVariables
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	PtcpdumpConfigMap                 *ebpf.Map `ebpf:"ptcpdump_config_map"`
	PtcpdumpExecEventStack            *ebpf.Map `ebpf:"ptcpdump_exec_event_stack"`
	PtcpdumpExecEvents                *ebpf.Map `ebpf:"ptcpdump_exec_events"`
	PtcpdumpExitEventTmp              *ebpf.Map `ebpf:"ptcpdump_exit_event_tmp"`
	PtcpdumpExitEvents                *ebpf.Map `ebpf:"ptcpdump_exit_events"`
	PtcpdumpExitEventsRingbuf         *ebpf.Map `ebpf:"ptcpdump_exit_events_ringbuf"`
	PtcpdumpFilterByKernelCount       *ebpf.Map `ebpf:"ptcpdump_filter_by_kernel_count"`
	PtcpdumpFilterIfindexMap          *ebpf.Map `ebpf:"ptcpdump_filter_ifindex_map"`
	PtcpdumpFilterMntnsMap            *ebpf.Map `ebpf:"ptcpdump_filter_mntns_map"`
	PtcpdumpFilterNetnsMap            *ebpf.Map `ebpf:"ptcpdump_filter_netns_map"`
	PtcpdumpFilterPidMap              *ebpf.Map `ebpf:"ptcpdump_filter_pid_map"`
	PtcpdumpFilterPidnsMap            *ebpf.Map `ebpf:"ptcpdump_filter_pidns_map"`
	PtcpdumpFilterUidMap              *ebpf.Map `ebpf:"ptcpdump_filter_uid_map"`
	PtcpdumpFlowPidMap                *ebpf.Map `ebpf:"ptcpdump_flow_pid_map"`
	PtcpdumpGoKeylogBufStorage        *ebpf.Map `ebpf:"ptcpdump_go_keylog_buf_storage"`
	PtcpdumpGoKeylogEventTmp          *ebpf.Map `ebpf:"ptcpdump_go_keylog_event_tmp"`
	PtcpdumpGoKeylogEvents            *ebpf.Map `ebpf:"ptcpdump_go_keylog_events"`
	PtcpdumpGoKeylogEventsRingbuf     *ebpf.Map `ebpf:"ptcpdump_go_keylog_events_ringbuf"`
	PtcpdumpPacketEventStack          *ebpf.Map `ebpf:"ptcpdump_packet_event_stack"`
	PtcpdumpPacketEvents              *ebpf.Map `ebpf:"ptcpdump_packet_events"`
	PtcpdumpPacketEventsRingbuf       *ebpf.Map `ebpf:"ptcpdump_packet_events_ringbuf"`
	PtcpdumpPtcpdumpExecEventsRingbuf *ebpf.Map `ebpf:"ptcpdump_ptcpdump_exec_events_ringbuf"`
	PtcpdumpSockCookiePidMap          *ebpf.Map `ebpf:"ptcpdump_sock_cookie_pid_map"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.PtcpdumpConfigMap,
		m.PtcpdumpExecEventStack,
		m.PtcpdumpExecEvents,
		m.PtcpdumpExitEventTmp,
		m.PtcpdumpExitEvents,
		m.PtcpdumpExitEventsRingbuf,
		m.PtcpdumpFilterByKernelCount,
		m.PtcpdumpFilterIfindexMap,
		m.PtcpdumpFilterMntnsMap,
		m.PtcpdumpFilterNetnsMap,
		m.PtcpdumpFilterPidMap,
		m.PtcpdumpFilterPidnsMap,
		m.PtcpdumpFilterUidMap,
		m.PtcpdumpFlowPidMap,
		m.PtcpdumpGoKeylogBufStorage,
		m.PtcpdumpGoKeylogEventTmp,
		m.PtcpdumpGoKeylogEvents,
		m.PtcpdumpGoKeylogEventsRingbuf,
		m.PtcpdumpPacketEventStack,
		m.PtcpdumpPacketEvents,
		m.PtcpdumpPacketEventsRingbuf,
		m.PtcpdumpPtcpdumpExecEventsRingbuf,
		m.PtcpdumpSockCookiePidMap,
	)
}

// BpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfVariables struct {
	G        *ebpf.Variable `ebpf:"g"`
	Unused1  *ebpf.Variable `ebpf:"unused1"`
	Unused12 *ebpf.Variable `ebpf:"unused12"`
	Unused13 *ebpf.Variable `ebpf:"unused13"`
	Unused14 *ebpf.Variable `ebpf:"unused14"`
	Unused2  *ebpf.Variable `ebpf:"unused2"`
	Unused3  *ebpf.Variable `ebpf:"unused3"`
	Unused4  *ebpf.Variable `ebpf:"unused4"`
	Unused5  *ebpf.Variable `ebpf:"unused5"`
	Unused6  *ebpf.Variable `ebpf:"unused6"`
	Unused7  *ebpf.Variable `ebpf:"unused7"`
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	PtcpdumpCgroupConnect4                   *ebpf.Program `ebpf:"ptcpdump_cgroup__connect4"`
	PtcpdumpCgroupConnect6                   *ebpf.Program `ebpf:"ptcpdump_cgroup__connect6"`
	PtcpdumpCgroupPostBind4                  *ebpf.Program `ebpf:"ptcpdump_cgroup__post_bind4"`
	PtcpdumpCgroupPostBind6                  *ebpf.Program `ebpf:"ptcpdump_cgroup__post_bind6"`
	PtcpdumpCgroupRecvmsg4                   *ebpf.Program `ebpf:"ptcpdump_cgroup__recvmsg4"`
	PtcpdumpCgroupRecvmsg6                   *ebpf.Program `ebpf:"ptcpdump_cgroup__recvmsg6"`
	PtcpdumpCgroupSendmsg4                   *ebpf.Program `ebpf:"ptcpdump_cgroup__sendmsg4"`
	PtcpdumpCgroupSendmsg6                   *ebpf.Program `ebpf:"ptcpdump_cgroup__sendmsg6"`
	PtcpdumpCgroupSockCreate                 *ebpf.Program `ebpf:"ptcpdump_cgroup__sock_create"`
	PtcpdumpCgroupSockRelease                *ebpf.Program `ebpf:"ptcpdump_cgroup__sock_release"`
	PtcpdumpCgroupSkbEgress                  *ebpf.Program `ebpf:"ptcpdump_cgroup_skb__egress"`
	PtcpdumpCgroupSkbIngress                 *ebpf.Program `ebpf:"ptcpdump_cgroup_skb__ingress"`
	PtcpdumpFentryAcctProcess                *ebpf.Program `ebpf:"ptcpdump_fentry__acct_process"`
	PtcpdumpFentryDoExit                     *ebpf.Program `ebpf:"ptcpdump_fentry__do_exit"`
	PtcpdumpFentryKfreeSkb                   *ebpf.Program `ebpf:"ptcpdump_fentry__kfree_skb"`
	PtcpdumpFentrySecuritySkClassifyFlow     *ebpf.Program `ebpf:"ptcpdump_fentry__security_sk_classify_flow"`
	PtcpdumpFentryTcpSendmsg                 *ebpf.Program `ebpf:"ptcpdump_fentry__tcp_sendmsg"`
	PtcpdumpFentryUdpSendSkb                 *ebpf.Program `ebpf:"ptcpdump_fentry__udp_send_skb"`
	PtcpdumpFentryUdpSendmsg                 *ebpf.Program `ebpf:"ptcpdump_fentry__udp_sendmsg"`
	PtcpdumpKprobeAcctProcess                *ebpf.Program `ebpf:"ptcpdump_kprobe__acct_process"`
	PtcpdumpKprobeDoExit                     *ebpf.Program `ebpf:"ptcpdump_kprobe__do_exit"`
	PtcpdumpKprobeKfreeSkb                   *ebpf.Program `ebpf:"ptcpdump_kprobe__kfree_skb"`
	PtcpdumpKprobeSecuritySkClassifyFlow     *ebpf.Program `ebpf:"ptcpdump_kprobe__security_sk_classify_flow"`
	PtcpdumpKprobeTcpSendmsg                 *ebpf.Program `ebpf:"ptcpdump_kprobe__tcp_sendmsg"`
	PtcpdumpKprobeUdpSendSkb                 *ebpf.Program `ebpf:"ptcpdump_kprobe__udp_send_skb"`
	PtcpdumpKprobeUdpSendmsg                 *ebpf.Program `ebpf:"ptcpdump_kprobe__udp_sendmsg"`
	PtcpdumpRawTracepointSchedProcessExec    *ebpf.Program `ebpf:"ptcpdump_raw_tracepoint__sched_process_exec"`
	PtcpdumpRawTracepointSchedProcessExit    *ebpf.Program `ebpf:"ptcpdump_raw_tracepoint__sched_process_exit"`
	PtcpdumpRawTracepointSchedProcessFork    *ebpf.Program `ebpf:"ptcpdump_raw_tracepoint__sched_process_fork"`
	PtcpdumpTcEgress                         *ebpf.Program `ebpf:"ptcpdump_tc_egress"`
	PtcpdumpTcIngress                        *ebpf.Program `ebpf:"ptcpdump_tc_ingress"`
	PtcpdumpTcxEgress                        *ebpf.Program `ebpf:"ptcpdump_tcx_egress"`
	PtcpdumpTcxIngress                       *ebpf.Program `ebpf:"ptcpdump_tcx_ingress"`
	PtcpdumpTpBtfNetDevQueue                 *ebpf.Program `ebpf:"ptcpdump_tp_btf__net_dev_queue"`
	PtcpdumpTpBtfNetifReceiveSkb             *ebpf.Program `ebpf:"ptcpdump_tp_btf__netif_receive_skb"`
	PtcpdumpTpBtfSchedProcessExec            *ebpf.Program `ebpf:"ptcpdump_tp_btf__sched_process_exec"`
	PtcpdumpTpBtfSchedProcessExit            *ebpf.Program `ebpf:"ptcpdump_tp_btf__sched_process_exit"`
	PtcpdumpTpBtfSchedProcessFork            *ebpf.Program `ebpf:"ptcpdump_tp_btf__sched_process_fork"`
	PtcpdumpTracepointSchedProcessExec       *ebpf.Program `ebpf:"ptcpdump_tracepoint__sched_process_exec"`
	PtcpdumpUprobeGoBuiltinTlsWriteKeyLog    *ebpf.Program `ebpf:"ptcpdump_uprobe__go_builtin__tls__write_key_log"`
	PtcpdumpUprobeGoBuiltinTlsWriteKeyLogRet *ebpf.Program `ebpf:"ptcpdump_uprobe__go_builtin__tls__write_key_log__ret"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.PtcpdumpCgroupConnect4,
		p.PtcpdumpCgroupConnect6,
		p.PtcpdumpCgroupPostBind4,
		p.PtcpdumpCgroupPostBind6,
		p.PtcpdumpCgroupRecvmsg4,
		p.PtcpdumpCgroupRecvmsg6,
		p.PtcpdumpCgroupSendmsg4,
		p.PtcpdumpCgroupSendmsg6,
		p.PtcpdumpCgroupSockCreate,
		p.PtcpdumpCgroupSockRelease,
		p.PtcpdumpCgroupSkbEgress,
		p.PtcpdumpCgroupSkbIngress,
		p.PtcpdumpFentryAcctProcess,
		p.PtcpdumpFentryDoExit,
		p.PtcpdumpFentryKfreeSkb,
		p.PtcpdumpFentrySecuritySkClassifyFlow,
		p.PtcpdumpFentryTcpSendmsg,
		p.PtcpdumpFentryUdpSendSkb,
		p.PtcpdumpFentryUdpSendmsg,
		p.PtcpdumpKprobeAcctProcess,
		p.PtcpdumpKprobeDoExit,
		p.PtcpdumpKprobeKfreeSkb,
		p.PtcpdumpKprobeSecuritySkClassifyFlow,
		p.PtcpdumpKprobeTcpSendmsg,
		p.PtcpdumpKprobeUdpSendSkb,
		p.PtcpdumpKprobeUdpSendmsg,
		p.PtcpdumpRawTracepointSchedProcessExec,
		p.PtcpdumpRawTracepointSchedProcessExit,
		p.PtcpdumpRawTracepointSchedProcessFork,
		p.PtcpdumpTcEgress,
		p.PtcpdumpTcIngress,
		p.PtcpdumpTcxEgress,
		p.PtcpdumpTcxIngress,
		p.PtcpdumpTpBtfNetDevQueue,
		p.PtcpdumpTpBtfNetifReceiveSkb,
		p.PtcpdumpTpBtfSchedProcessExec,
		p.PtcpdumpTpBtfSchedProcessExit,
		p.PtcpdumpTpBtfSchedProcessFork,
		p.PtcpdumpTracepointSchedProcessExec,
		p.PtcpdumpUprobeGoBuiltinTlsWriteKeyLog,
		p.PtcpdumpUprobeGoBuiltinTlsWriteKeyLogRet,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_arm_bpfel.o
var _BpfBytes []byte
